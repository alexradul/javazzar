name: Release Build

on:
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Enable debug logging
      - name: Enable debug logging
        run: |
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Specify your Node.js version

      # Step 3: Read package.json
      - name: Read package.json
        id: pkg
        run: |
          PKG_NAME=$(jq -r '.name' package.json)
          PKG_VERSION=$(jq -r '.version' package.json)
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_ENV
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Run Webpack build
      - name: Build with Webpack
        run: npx webpack --mode=production

      # Step 6: Set JAVAZZAR_ARCHIVE variable
      - name: Set archive name
        run: echo "JAVAZZAR_ARCHIVE=${PKG_NAME}-${PKG_VERSION}.zip" >> $GITHUB_ENV

        # Step 7: rename dist folder to javazzar
      - name: Rename dist folder
        run: mv dist javazzar

      # Step 8: Zip the built files into an archive
      - name: Archive build output
        run: zip -r ./${{ env.JAVAZZAR_ARCHIVE }} javazzar/

      # Step 9: Upload built files as release assets
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JAVAZZAR_ARCHIVE }}
          path: ./${{ env.JAVAZZAR_ARCHIVE }}

          # Step 10: Get the release upload URL
      - name: Get release upload URL
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            return release.data.upload_url;

      # Step 11: Upload release asset to GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: ./${{ env.JAVAZZAR_ARCHIVE }}
          asset_name: ${{ env.JAVAZZAR_ARCHIVE }}
          asset_content_type: application/zip