/* global app */
const path = require("path"),
    fs = require("fs");

const preferences = app.preferences;

const emptyUserConfiguration = {
    projectCodebase: ""
};

const defaultTypeMapping = {
    string: "String",
    int: "int",
    long: "long",
    bool: "bool",
    float: "float",
    double: "double",
    dateTime: "LocalDateTime",
    date: "Date",
    time: "LocalTime",
    binary: "byte[]"
};

const defaultPersistence = {
    enablePersistence: false,
    idAttributeType: "Long",
    generateSerializable: false,
    generateEquals: true,
    useStringEnumTypes: true,
    useTemporalAnnotation: true,
    useNotNullAnnotation: true
};

const defaultSpring = {
    enableSpring: false,
    commonRepositoryInterface: "CrudRepository"
};

const jacksonDefaults = {
    enableJackson: true
};

const emptyProjectConfiguration = {
    useTabForIndentation: false,
    indentSpaces: "4",
    useDiamondOperator: true,
    generateAccessors: true,
    generateDocumentation: true,
    generatePackageInfo: false,
    copyrightText: "/*\\n* This code has been generated by the Javazzar: a code generator for modern Java."+
    "\\n* \\n* Drop me a line or two at aleksandar.radulovic@gmail.com: I'd love to hear from you!\\n*/",
    standardImports: "import java.util.*;import java.time.*;",
    fluentSetters: false,
    linkMethodsEnabled: true,
    fluentLinkMethods: false,
    unorderedCollection: "Set",
    unorderedCollectionImpl: "HashSet",
    orderedCollection: "List",
    orderedCollectionImpl: "ArrayList",
    typeMapping: defaultTypeMapping,
    persistence: defaultPersistence,
    jackson: jacksonDefaults,
    spring: defaultSpring
};

const save = (projectPath) => {
    const useLocalSettings = preferences.get("javazzar.project.useLocalSettings");
    if (useLocalSettings) {
        const configuration = fromPreferences(preferences);
        saveConfiguration(projectConfiguration(configuration), projectConfigurationFilename(projectPath));
        saveConfiguration(userConfiguration(configuration), userConfigurationFilename(projectPath));
    }
};

const load = (projectPath) => {
    const useLocalSettings = preferences.get("javazzar.project.useLocalSettings");
    if (useLocalSettings && projectPath) {
        const userConfig = loadConfiguration(userConfigurationFilename(projectPath), emptyUserConfiguration);
        const projectConfig = loadConfiguration(projectConfigurationFilename(projectPath), emptyProjectConfiguration);
        // eslint-disable-next-line prefer-object-spread
        const configuration = Object.assign({}, userConfig,projectConfig);
        apply(configuration);
    }
};

const fromPreferences = (prefs) => {
    return {
        projectCodebase: prefs.get("javazzar.java.project.codebase"),
        useTabForIndentation: prefs.get("javazzar.java.codegen.useTabForIndentation"),
        useDiamondOperator: prefs.get("javazzar.java.codegen.useDiamondOperator"),
        indentSpaces: prefs.get("javazzar.java.codegen.indentSpaces"),
        generateAccessors: prefs.get("javazzar.java.project.generateAccessors"),
        generateDocumentation: prefs.get("javazzar.java.project.generateJavadoc"),
        generatePackageInfo: prefs.get("javazzar.java.project.generatePackageInfo"),
        copyrightText: prefs.get("javazzar.java.project.fileHeaderComment"),
        // additional settings
        standardImports: prefs.get("javazzar.java.additional.standardImports"),
        fluentSetters: prefs.get("javazzar.java.additional.fluentSetters"),
        linkMethodsEnabled: prefs.get("javazzar.java.additional.linkMethodsEnabled"),
        fluentLinkMethods: prefs.get("javazzar.java.additional.fluentLinkMethods"),
        unorderedCollection: prefs.get("javazzar.java.additional.unorderedCollection"),
        unorderedCollectionImpl: prefs.get("javazzar.java.additional.unorderedCollectionImpl"),
        orderedCollection: prefs.get("javazzar.java.additional.orderedCollection"),
        orderedCollectionImpl: prefs.get("javazzar.java.additional.orderedCollectionImpl"),
        // type mapping
        typeMapping: {
            string: prefs.get("javazzar.java.typemapping.string"),
            int: prefs.get("javazzar.java.typemapping.int"),
            long: prefs.get("javazzar.java.typemapping.long"),
            bool: prefs.get("javazzar.java.typemapping.bool"),
            float: prefs.get("javazzar.java.typemapping.float"),
            double: prefs.get("javazzar.java.typemapping.double"),
            dateTime: prefs.get("javazzar.java.typemapping.dateTime"),
            date: prefs.get("javazzar.java.typemapping.date"),
            time: prefs.get("javazzar.java.typemapping.time"),
            binary: prefs.get("javazzar.java.typemapping.binary")
        },
        persistence: {
            enablePersistence: prefs.get("javazzar.java.persistence.enable"),
            idAttributeType: prefs.get("javazzar.java.persistence.idAttributeType"),
            generateSerializable: prefs.get("javazzar.java.persistence.generateSerializable"),
            generateEquals: prefs.get("javazzar.java.persistence.generateEquals"),
            useStringEnumTypes: prefs.get("javazzar.java.persistence.useStringEnumTypes"),
            useTemporalAnnotation: prefs.get("javazzar.java.persistence.useTemporalAnnotation"),
            useNotNullAnnotation: prefs.get("javazzar.java.persistence.useNotNullAnnotation")
        },
        jackson: {
            enableJackson: prefs.get("javazzar.jackson.enable") == true
        }, 
        spring: {
            enableSpring: prefs.get("javazzar.spring.enable"),
            commonRepositoryInterface: prefs.get("javazzar.spring.data.commonRepositoryInterface")
        }
    };
};

const apply = (configuration) => {
    // set preferences
    preferences.set("javazzar.java.codegen.useTabForIndentation", configuration.useTabForIndentation);
    preferences.set("javazzar.java.codegen.indentSpaces", configuration.indentSpaces);
    preferences.set("javazzar.java.codegen.useDiamondOperator", configuration.useDiamondOperator);
    preferences.set("javazzar.java.project.codebase", configuration.projectCodebase);
    preferences.set("javazzar.java.project.generateAccessors", configuration.generateAccessors);
    preferences.set("javazzar.java.project.generateJavadoc", configuration.generateDocumentation);
    preferences.set("javazzar.java.project.generatePackageInfo", configuration.generatePackageInfo);
    preferences.set("javazzar.java.project.fileHeaderComment", configuration.copyrightText);
    // additional settings
    preferences.set("javazzar.java.additional.standardImports", configuration.standardImports);
    preferences.set("javazzar.java.additional.fluentSetters", configuration.fluentSetters);
    preferences.set("javazzar.java.additional.fluentLinkMethods", configuration.fluentLinkMethods);
    preferences.set("javazzar.java.additional.linkMethodsEnabled", configuration.linkMethodsEnabled);
    preferences.set("javazzar.java.additional.unorderedCollection", configuration.unorderedCollection);
    preferences.set("javazzar.java.additional.unorderedCollectionImpl", configuration.unorderedCollectionImpl);
    preferences.set("javazzar.java.additional.orderedCollection", configuration.orderedCollection);
    preferences.set("javazzar.java.additional.orderedCollectionImpl", configuration.orderedCollectionImpl);
    // type mapping
    preferences.set("javazzar.java.typemapping.string", configuration.typeMapping.string);    
    preferences.set("javazzar.java.typemapping.int", configuration.typeMapping.int);    
    preferences.set("javazzar.java.typemapping.long", configuration.typeMapping.long);    
    preferences.set("javazzar.java.typemapping.bool", configuration.typeMapping.bool);    
    preferences.set("javazzar.java.typemapping.float", configuration.typeMapping.float);    
    preferences.set("javazzar.java.typemapping.double", configuration.typeMapping.double);    
    preferences.set("javazzar.java.typemapping.dateTime", configuration.typeMapping.dateTime);    
    preferences.set("javazzar.java.typemapping.date", configuration.typeMapping.date);    
    preferences.set("javazzar.java.typemapping.time", configuration.typeMapping.time);    
    preferences.set("javazzar.java.typemapping.binary", configuration.typeMapping.binary);
    // persistence
    preferences.set("javazzar.java.persistence.enable", configuration.persistence.enablePersistence);
    preferences.set("javazzar.java.persistence.idAttributeType", configuration.persistence.idAttributeType);
    preferences.set("javazzar.java.persistence.generateSerializable", configuration.persistence.generateSerializable);
    preferences.set("javazzar.java.persistence.generateEquals", configuration.persistence.generateEquals);
    preferences.set("javazzar.java.persistence.useStringEnumTypes", configuration.persistence.useStringEnumTypes);
    preferences.set("javazzar.java.persistence.useTemporalAnnotation", configuration.persistence.useTemporalAnnotation);
    preferences.set("javazzar.java.persistence.useNotNullAnnotation", configuration.persistence.useNotNullAnnotation);
    // jackson
    preferences.set("javazzar.jackson.enable", configuration.jackson.enableJackson);
    // spring
    preferences.set("javazzar.spring.enable", configuration.spring.enableSpring);
    preferences.set("javazzar.spring.data.commonRepositoryInterface", configuration.spring.commonRepositoryInterface);
};

const loadConfiguration = (path, defaultConfig)  => {
    return fs.existsSync(path)? 
        JSON.parse(fs.readFileSync(path)) : 
        defaultConfig;
};

const saveConfiguration = (config, path) => {
    const stringConfig = JSON.stringify(config, null, "  ");
    fs.writeFileSync(path, stringConfig);
};

const userConfiguration = (configuration) => {
    return {
        projectCodebase: configuration.projectCodebase
    };
};

const projectConfiguration = (configuration) => {
    // eslint-disable-next-line prefer-object-spread
    const projectConfig = Object.assign({}, configuration);
    delete projectConfig.projectCodebase;
    return projectConfig;
};

const projectConfigurationFilename = (modelFilename) => `${path.dirname(modelFilename)}/rebel.conf`;
const userConfigurationFilename = (modelFilename) => `${path.dirname(modelFilename)}/rebel.user.conf`;

exports.save = save;
exports.load = load;