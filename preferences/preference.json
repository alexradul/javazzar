{
  "id": "javazzar",
  "name": "Javazzar",
  "schema": {
    "javazzar.java.codegen": {
      "text": "General Settings",
      "type": "section"
    },
    "javazzar.rebel.suppressProperties": {
      "text": "Suppress StarUML property display",
      "description": "If set, Javazzar will suppress display of StarUML tags/properties whenever possible.",
      "type": "check",
      "default": true
    },
    "javazzar.project.useLocalSettings": {
      "text": "Use local Javazzar settings",
      "description": "Use local settings instead of global Javazzar configuration.\nIf set, the Javazzar will store its settings on project basis.",
      "type": "check",
      "default": false
    },
    "javazzar.java.codegen.useTabForIndentation": {
      "text": "Use Tab for indentation",
      "description": "Use Tab for indentation instead of spaces. \nIf not set, spaces will be used.",
      "type": "check",
      "default": false
    },
    "javazzar.java.codegen.indentSpaces": {
      "text": "Indent Spaces",
      "description": "Number of spaces to be used for indentation, if 'Use Tab' option is not set.",
      "type": "number",
      "default": 4
    },
    "javazzar.java.codegen.useDiamondOperator": {
      "text": "Use Diamond Operator <>",
      "description": "To make generated Java code compatible with Java 6, switch this option off.",
      "type": "check",
      "default": true
    },
    "javazzar.java.project": {
      "text": "Project Settings",
      "type": "section"
    },
    "javazzar.java.project.codebase": {
      "text": "Project Codebase",
      "description": "The directory to store generated source.",
      "type": "string",
      "default": ""
    },
    "javazzar.java.project.generateAccessors": {
      "text": "Use Lombok",
      "description": "Use Lombok as an alternative to writing getters and setters",
      "type": "check",
      "default": false
    },
    "javazzar.java.project.generateJavadoc": {
      "text": "Generate Documentation",
      "description": "Generate javadoc documentation comments.",
      "type": "check",
      "default": true
    },
    "javazzar.java.project.generatePackageInfo": {
      "text": "Generate Package Info",
      "description": "Generate package-info for Java packages.",
      "type": "check",
      "default": false
    },
    "javazzar.java.project.fileHeaderComment": {
      "text": "Copyright Text",
      "description": "Copyright text to be used in all generated Java files.",
      "type": "string",
      "default": "/*\\n* This code has been generated by the Javazzar: a code generator for modern Java.\\n*\\n* Drop me a line or two at aleksandar.radulovic@gmail.com: we would love to hear from you!\\n*/"
    },
    "javazzar.java.additional": {
      "text": "Additional Settings",
      "type": "section"
    },
    "javazzar.java.additional.standardImports": {
      "text": "Standard Imports",
      "description": "Imports to be used in all generated Java artifacts.",
      "type": "string",
      "default": "import java.util.*;import java.time.*;"
    },
    "javazzar.java.additional.fluentSetters": {
      "text": "Generate fluent setters",
      "description": "Generate fluent style setters",
      "type": "check",
      "default": false
    },
    "javazzar.java.additional.linkMethodsEnabled": {
      "text": "Generate link/unlink methods",
      "description": "Generate link/unlink methods",
      "type": "check",
      "default": true
    },
    "javazzar.java.additional.fluentLinkMethods": {
      "text": "Generate fluent link/unlink methods",
      "description": "Generate fluent style link/unlink methods",
      "type": "check",
      "default": false
    },
    "javazzar.java.additional.unorderedCollection": {
      "text": "Unordered Collection Interface",
      "description": "Unordered collection interface to be used for unordered associations and multiplicable attributes.",
      "type": "string",
      "default": "Set"
    },
    "javazzar.java.additional.unorderedCollectionImpl": {
      "text": "Unordered Collection Implementation",
      "description": "Default implementation of the unordered collections.",
      "type": "string",
      "default": "HashSet"
    },
    "javazzar.java.additional.orderedCollection": {
      "text": "Ordered Collection Interface",
      "description": "Ordered collection interface to be used for ordered associations and multiplicable attributes.",
      "type": "string",
      "default": "List"
    },
    "javazzar.java.additional.orderedCollectionImpl": {
      "text": "Ordered Collection Implementation",
      "description": "Default implementation of the ordered collections.",
      "type": "string",
      "default": "ArrayList"
    },
    "javazzar.java.typemapping": {
      "text": "Mapping model types to Java",
      "type": "section"
    },
    "javazzar.java.typemapping.string": {
      "text": "  <<<  string",
      "description": "Java type mapping for string",
      "type": "string",
      "default": "String"
    },
    "javazzar.java.typemapping.int": {
      "text": "  <<<  int",
      "description": "Java type mapping for int",
      "type": "string",
      "default": "int"
    },
    "javazzar.java.typemapping.long": {
      "text": "  <<<  long",
      "description": "Java type mapping for long",
      "type": "string",
      "default": "long"
    },
    "javazzar.java.typemapping.bool": {
      "text": "  <<<  bool",
      "description": "Java type mapping for bool",
      "type": "string",
      "default": "boolean"
    },
    "javazzar.java.typemapping.float": {
      "text": "  <<<  float",
      "description": "Java type mapping for float",
      "type": "string",
      "default": "float"
    },
    "javazzar.java.typemapping.double": {
      "text": "  <<<  double",
      "description": "Java type mapping for double",
      "type": "string",
      "default": "double"
    },
    "javazzar.java.typemapping.dateTime": {
      "text": "  <<<  dateTime",
      "description": "Java type mapping for dateTime",
      "type": "string",
      "default": "LocalDateTime"
    },
    "javazzar.java.typemapping.date": {
      "text": "  <<<  date",
      "description": "Java type mapping for date",
      "type": "string",
      "default": "LocalDate"
    },
    "javazzar.java.typemapping.time": {
      "text": "  <<<  time",
      "description": "Java type mapping for time",
      "type": "string",
      "default": "LocalTime"
    },
    "javazzar.java.typemapping.binary": {
      "text": "  <<<  binary",
      "description": "Java type mapping for binary",
      "type": "string",
      "default": "byte[]"
    },
    "javazzar.java.persistence": {
      "text": "Persistence Settings",
      "type": "section"
    },
    "javazzar.java.persistence.enable": {
      "text": "Generate persistence meta-data",
      "description": "Enable persistence model extensions and process them.",
      "type": "check",
      "default": false
    },
    "javazzar.java.persistence.idAttributeType": {
      "text": "Java type for entity id",
      "description": "Default type to be used for id attribute of persistent entities",
      "type": "string",
      "default": "Long"
    },
    "javazzar.java.persistence.generateSerializable": {
      "text": "Persistent classes are Serializable",
      "description": "Should entities implement Serializable interface?",
      "type": "check",
      "default": false
    },
    "javazzar.java.persistence.generateEquals": {
      "text": "Generate equals()",
      "description": "Generate equals method for persistent classes?",
      "type": "check",
      "default": true
    },
    "javazzar.java.persistence.useStringEnumTypes": {
      "text": "Persist enums as strings",
      "description": "Use enum string literals as database values",
      "type": "check",
      "default": true
    },
    "javazzar.java.persistence.useTemporalAnnotation": {
      "text": "Use @Temporal annotation",
      "description": "Use @Temporal for date/time attributes",
      "type": "check",
      "default": true
    },
    "javazzar.java.persistence.useNotNullAnnotation": {
      "text": "Use @NotNull annotation",
      "description": "Use @NotNull annotation for required fields",
      "type": "check",
      "default": true
    },
    "javazzar.jackson": {
      "text": "Jackson Settings",
      "type": "section"
    },
    "javazzar.jackson.enable": {
      "text": "Enable Jackson",
      "description": "Enable support for Jackson code generation",
      "type": "check",
      "default": true
    },
    "javazzar.spring": {
      "text": "Spring Settings",
      "type": "section"
    },
    "javazzar.spring.enable": {
      "text": "Enable Spring",
      "description": "Enable support for modeling Spring components",
      "type": "check",
      "default": false
    },
    "javazzar.spring.data": {
      "text": "Spring Data",
      "type": "section"
    },
    "javazzar.spring.data.commonRepositoryInterface": {
      "text": "Common Repository Interface",
      "description": "Common Java interface for all Repositories",
      "type": "string",
      "default": "CrudRepository"
    },
    "javazzar.java.annotations.custom": {
      "text": "Custom Annotations Processing",
      "type": "section"
    },
    "javazzar.java.annotations.custom.enable": {
      "text": "Enable custom annotations",
      "description": "Enable definition of arbitrary annotations for different model elements.",
      "type": "check",
      "default": "false"
    }
  }
}